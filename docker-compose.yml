version: "3.8"

volumes:
  n8n_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /root/docker/n8n
  redis_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /root/docker/redis

  letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /root/letsencrypt

x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE}
    - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
    - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_HOST=${N8N_HOST}
    - N8N_PROTOCOL=${N8N_PROTOCOL}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
    - GENERIC_TIMEZONE=Asia/Kolkata
    - N8N_RUNNERS_ENABLED=true
  links:
    - redis
  volumes:
    - n8n_storage:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy

services:
  # nginx:
  #   image: nginx:stable-alpine
  #   ports:
  #     - 443:443
  #     - 80:80
  #   volumes:
  #     - /root/nginx/conf.d:/etc/nginx/conf.d:ro
  #     - /root/certs/n8n.crt:/etc/nginx/certs/n8n.crt:ro
  #     - /root/certs/n8n.key:/etc/nginx/certs/n8n.key:ro
  #   depends_on:
  #     - n8n
  #   restart: always

  traefik:
    image: traefik:v3.0
    restart: always
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
      # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "443:443"
      - "80:80"
      - "8080:8080"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    <<: *shared
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      # Security headers
      - traefik.http.middlewares.n8n-headers.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n-headers.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n-headers.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n-headers.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n-headers.headers.SSLHost=${N8N_HOST}
      - traefik.http.middlewares.n8n-headers.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n-headers.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n-headers
    depends_on:
      - traefik
    # ports:
    #   - 5678:5678

  n8n-worker:
    <<: *shared
    command: worker
    depends_on:
      - n8n
